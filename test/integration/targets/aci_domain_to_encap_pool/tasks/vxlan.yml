# Test code for the ACI modules
# Copyright: (c) 2018, Dag Wieers (@dagwieers) <dag@wieers.com>

# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)


# CLEAN ENVIRONMENT
- name: Remove domain to VXLAN pool binding
  aci_domain_to_encap_pool: &binding_absent
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: info
    domain: vmm_dom
    domain_type: vmm
    vm_provider: vmware
    pool: test_pool
    pool_type: vxlan
    state: absent

- name: Remove VMM domain
  aci_domain:
    host: "{{ aci_hostname }}"
    username: "{{ aci_username }}"
    password: "{{ aci_password }}"
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    domain: vmm_dom
    domain_type: vmm
    vm_provider: vmware
    state: absent

- name: Create VXLAN pool
  aci_encap_pool:
    host: "{{ aci_hostname }}"
    username: "{{ aci_username }}"
    password: "{{ aci_password }}"
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    pool: test_pool
    pool_type: vxlan
    description: Test VXLAN pool
    state: present


# ADD BINDING
- name: Add domain to VXLAN pool binding (check_mode)
  aci_domain_to_encap_pool: &binding_present
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: info
    domain: vmm_dom
    domain_type: vmm
    vm_provider: vmware
    pool: test_pool
    pool_type: vxlan
    state: present
  check_mode: yes
  register: cm_add_binding

- name: Add domain to VXLAN pool binding (normal mode)
  aci_domain_to_encap_pool: *binding_present
  register: nm_add_binding

- name: Verify add_binding
  assert:
    that:
    - cm_add_binding.changed == nm_add_binding.changed == true
    - 'cm_add_binding.sent == nm_add_binding.sent == {"vmmDomP": {"attributes": {"name": "vmm_dom"}, "children": [{"infraRsVlanNs": {"attributes": {"tDn": "uni/infra/vxlanns-[test_pool]-dynamic"}}}]}}'
    - 'cm_add_binding.proposed == nm_add_binding.proposed == {"vmmDomP": {"attributes": {"name": "vmm_dom"}, "children": [{"infraRsVlanNs": {"attributes": {"tDn": "uni/infra/vxlanns-[test_pool]-dynamic"}}}]}}'
    - cm_add_binding.current == cm_add_binding.previous == nm_add_binding.previous == []
    - 'nm_add_binding.current == [{"vmmDomP": {"attributes": {"dn": "uni/vmm-vmm_dom", "name": "vmm_dom", "nameAlias": "", "ownerKey": "", "ownerTag": ""}, "children": [{"infraRsVlanNs": {"attributes": {"tDn": "uni/infra/vxlanns-[test_pool]-dynamic"}}}]}}]'

- name: Add domain to VXLAN pool binding again (check_mode)
  aci_domain_to_encap_pool: *binding_present
  check_mode: yes
  register: cm_add_binding_again

- name: Add domain to VXLAN pool binding again (normal mode)
  aci_domain_to_encap_pool: *binding_present
  register: nm_add_binding_again

- name: Verify add_binding_again
  assert:
    that:
    - cm_add_binding_again.changed == nm_add_binding_again.changed == false


# QUERY ALL BINDINGS
- name: Query all domain to VXLAN pool bindings (check_mode)
  aci_domain_to_encap_pool: &binding_query
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: info
    domain_type: vmm
    vm_provider: vmware
    pool_type: vxlan
    state: query
  check_mode: yes
  register: cm_query_all_bindings

- name: Query all domain to VXLAN pool bindings (normal mode)
  aci_domain_to_encap_pool: *binding_query
  register: nm_query_all_bindings

- name: Verify query_all_bindings
  assert:
    that:
    - cm_query_all_bindings.changed == nm_query_all_bindings.changed == false
    - cm_query_all_bindings == nm_query_all_bindings
    - nm_query_all_bindings.current|length >= 1


# QUERY A BINDING
- name: Query our domain to VXLAN pool binding (check_mode)
  aci_domain_to_encap_pool:
    <<: *binding_query
    domain: vmm_dom
    vm_provider: vmware
    pool: test_pool
    pool_type: vxlan
  check_mode: yes
  register: cm_query_binding

- name: Query our domain to VXLAN pool binding (normal mode)
  aci_domain_to_encap_pool:
    <<: *binding_query
    domain: vmm_dom
    vm_provider: vmware
    pool: test_pool
    pool_type: vxlan
  register: nm_query_binding

- name: Verify query_binding
  assert:
    that:
    - cm_query_binding.changed == nm_query_binding.changed == false
    - cm_query_binding == nm_query_binding
    - nm_query_binding.current.0.vmmDomP.attributes.dn == 'uni/vmm-vmm_dom'
    - nm_query_binding.current.0.vmmDomP.attributes.name == 'vmm_dom'
    - nm_query_binding.current.0.vmmDomP.children.0.infraRsVlanNs.attributes.tCl == 'fvnsVlanInstP'
    - nm_query_binding.current.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vxlanns-[test_pool]-dynamic'


# REMOVE BINDING
- name: Remove domain to VXLAN pool binding (check_mode)
  aci_domain_to_encap_pool: *binding_absent
  check_mode: yes
  register: cm_remove_binding

- name: Remove domain to VXLAN pool binding (normal mode)
  aci_domain_to_encap_pool: *binding_absent
  register: nm_remove_binding

- name: Verify remove_binding
  assert:
    that:
    - cm_remove_binding.changed == nm_remove_binding.changed == true
    - 'cm_remove_binding.current == cm_remove_binding.previous == nm_remove_binding.previous == [{"vmmDomP": {"attributes": {"dn": "uni/vmm-vmm_dom", "name": "vmm_dom", "nameAlias": "", "ownerKey": "", "ownerTag": ""}, "children": [{"infraRsVlanNs": {"attributes": {"tDn": "uni/infra/vxlanns-[test_pool]-dynamic"}}}]}}]'
    - nm_remove_binding.current == []

- name: Remove domain to VXLAN pool binding again (check_mode)
  aci_domain_to_encap_pool: *binding_absent
  check_mode: yes
  register: cm_remove_binding_again

- name: Remove domain to VXLAN pool binding again (normal mode)
  aci_domain_to_encap_pool: *binding_absent
  register: nm_remove_binding_again

- name: Verify remove_binding_again
  assert:
    that:
    - cm_remove_binding_again.changed == nm_remove_binding_again.changed == false


# QUERY NON-EXISTING BINDING
- name: Query non-existing domain to VXLAN pool binding (check_mode)
  aci_domain_to_encap_pool:
    <<: *binding_query
    domain: vmm_dom
    vm_provider: vmware
    pool: test_pool
    pool_type: vxlan
  check_mode: yes
  register: cm_query_non_binding

- name: Query non-existing domain to VXLAN pool binding (normal mode)
  aci_domain_to_encap_pool:
    <<: *binding_query
    domain: vmm_dom
    vm_provider: vmware
    pool: test_pool
    pool_type: vxlan
  register: nm_query_non_binding

- name: Verify query_non_binding
  assert:
    that:
    - cm_query_non_binding.changed == nm_query_non_binding.changed == false
    - cm_query_non_binding == nm_query_non_binding
    - nm_query_non_binding.current == []
